/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IBaseEscrow {
  export type ImmutablesStruct = {
    orderHash: BytesLike;
    hashlock: BytesLike;
    maker: BigNumberish;
    taker: BigNumberish;
    token: BigNumberish;
    amount: BigNumberish;
    safetyDeposit: BigNumberish;
    timelocks: BigNumberish;
  };

  export type ImmutablesStructOutput = [
    orderHash: string,
    hashlock: string,
    maker: bigint,
    taker: bigint,
    token: bigint,
    amount: bigint,
    safetyDeposit: bigint,
    timelocks: bigint
  ] & {
    orderHash: string;
    hashlock: string;
    maker: bigint;
    taker: bigint;
    token: bigint;
    amount: bigint;
    safetyDeposit: bigint;
    timelocks: bigint;
  };
}

export declare namespace IOrderMixin {
  export type OrderStruct = {
    salt: BigNumberish;
    maker: BigNumberish;
    receiver: BigNumberish;
    makerAsset: BigNumberish;
    takerAsset: BigNumberish;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
    makerTraits: BigNumberish;
  };

  export type OrderStructOutput = [
    salt: bigint,
    maker: bigint,
    receiver: bigint,
    makerAsset: bigint,
    takerAsset: bigint,
    makingAmount: bigint,
    takingAmount: bigint,
    makerTraits: bigint
  ] & {
    salt: bigint;
    maker: bigint;
    receiver: bigint;
    makerAsset: bigint;
    takerAsset: bigint;
    makingAmount: bigint;
    takingAmount: bigint;
    makerTraits: bigint;
  };
}

export interface IResolverExampleInterface extends Interface {
  getFunction(
    nameOrSignature: "arbitraryCalls" | "deployDst" | "deploySrc"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arbitraryCalls",
    values: [AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deployDst",
    values: [IBaseEscrow.ImmutablesStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploySrc",
    values: [
      IBaseEscrow.ImmutablesStruct,
      IOrderMixin.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "arbitraryCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployDst", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploySrc", data: BytesLike): Result;
}

export interface IResolverExample extends BaseContract {
  connect(runner?: ContractRunner | null): IResolverExample;
  waitForDeployment(): Promise<this>;

  interface: IResolverExampleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  arbitraryCalls: TypedContractMethod<
    [targets: AddressLike[], arguments: BytesLike[]],
    [void],
    "nonpayable"
  >;

  deployDst: TypedContractMethod<
    [
      dstImmutables: IBaseEscrow.ImmutablesStruct,
      srcCancellationTimestamp: BigNumberish
    ],
    [void],
    "payable"
  >;

  deploySrc: TypedContractMethod<
    [
      immutables: IBaseEscrow.ImmutablesStruct,
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "arbitraryCalls"
  ): TypedContractMethod<
    [targets: AddressLike[], arguments: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployDst"
  ): TypedContractMethod<
    [
      dstImmutables: IBaseEscrow.ImmutablesStruct,
      srcCancellationTimestamp: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deploySrc"
  ): TypedContractMethod<
    [
      immutables: IBaseEscrow.ImmutablesStruct,
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
