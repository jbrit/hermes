/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { IOrderMixin, IOrderMixinInterface } from "../IOrderMixin";

const _abi = [
  {
    type: "function",
    name: "bitInvalidatorForOrder",
    inputs: [
      {
        name: "maker",
        type: "address",
        internalType: "address",
      },
      {
        name: "slot",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "result",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "bitsInvalidateForOrder",
    inputs: [
      {
        name: "makerTraits",
        type: "uint256",
        internalType: "MakerTraits",
      },
      {
        name: "additionalMask",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "cancelOrder",
    inputs: [
      {
        name: "makerTraits",
        type: "uint256",
        internalType: "MakerTraits",
      },
      {
        name: "orderHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "cancelOrders",
    inputs: [
      {
        name: "makerTraits",
        type: "uint256[]",
        internalType: "MakerTraits[]",
      },
      {
        name: "orderHashes",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "fillContractOrder",
    inputs: [
      {
        name: "order",
        type: "tuple",
        internalType: "struct IOrderMixin.Order",
        components: [
          {
            name: "salt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "receiver",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "takerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "takingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "makerTraits",
            type: "uint256",
            internalType: "MakerTraits",
          },
        ],
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "takerTraits",
        type: "uint256",
        internalType: "TakerTraits",
      },
    ],
    outputs: [
      {
        name: "makingAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "takingAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "orderHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "fillContractOrderArgs",
    inputs: [
      {
        name: "order",
        type: "tuple",
        internalType: "struct IOrderMixin.Order",
        components: [
          {
            name: "salt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "receiver",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "takerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "takingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "makerTraits",
            type: "uint256",
            internalType: "MakerTraits",
          },
        ],
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "takerTraits",
        type: "uint256",
        internalType: "TakerTraits",
      },
      {
        name: "args",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "makingAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "takingAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "orderHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "fillOrder",
    inputs: [
      {
        name: "order",
        type: "tuple",
        internalType: "struct IOrderMixin.Order",
        components: [
          {
            name: "salt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "receiver",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "takerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "takingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "makerTraits",
            type: "uint256",
            internalType: "MakerTraits",
          },
        ],
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "takerTraits",
        type: "uint256",
        internalType: "TakerTraits",
      },
    ],
    outputs: [
      {
        name: "makingAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "takingAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "orderHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "fillOrderArgs",
    inputs: [
      {
        name: "order",
        type: "tuple",
        internalType: "struct IOrderMixin.Order",
        components: [
          {
            name: "salt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "receiver",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "takerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "takingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "makerTraits",
            type: "uint256",
            internalType: "MakerTraits",
          },
        ],
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "takerTraits",
        type: "uint256",
        internalType: "TakerTraits",
      },
      {
        name: "args",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "makingAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "takingAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "orderHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "hashOrder",
    inputs: [
      {
        name: "order",
        type: "tuple",
        internalType: "struct IOrderMixin.Order",
        components: [
          {
            name: "salt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "receiver",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "takerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "takingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "makerTraits",
            type: "uint256",
            internalType: "MakerTraits",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "orderHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "rawRemainingInvalidatorForOrder",
    inputs: [
      {
        name: "maker",
        type: "address",
        internalType: "address",
      },
      {
        name: "orderHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "remainingRaw",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "remainingInvalidatorForOrder",
    inputs: [
      {
        name: "maker",
        type: "address",
        internalType: "address",
      },
      {
        name: "orderHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "remaining",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "simulate",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "BitInvalidatorUpdated",
    inputs: [
      {
        name: "maker",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "slotIndex",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "slotValue",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OrderCancelled",
    inputs: [
      {
        name: "orderHash",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OrderFilled",
    inputs: [
      {
        name: "orderHash",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "remainingAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "BadSignature",
    inputs: [],
  },
  {
    type: "error",
    name: "EpochManagerAndBitInvalidatorsAreIncompatible",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPermit2Transfer",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidatedOrder",
    inputs: [],
  },
  {
    type: "error",
    name: "MakingAmountTooLow",
    inputs: [],
  },
  {
    type: "error",
    name: "MismatchArraysLengths",
    inputs: [],
  },
  {
    type: "error",
    name: "OrderExpired",
    inputs: [],
  },
  {
    type: "error",
    name: "OrderIsNotSuitableForMassInvalidation",
    inputs: [],
  },
  {
    type: "error",
    name: "PartialFillNotAllowed",
    inputs: [],
  },
  {
    type: "error",
    name: "PredicateIsNotTrue",
    inputs: [],
  },
  {
    type: "error",
    name: "PrivateOrder",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrancyDetected",
    inputs: [],
  },
  {
    type: "error",
    name: "SimulationResults",
    inputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "res",
        type: "bytes",
        internalType: "bytes",
      },
    ],
  },
  {
    type: "error",
    name: "SwapWithZeroAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "TakingAmountExceeded",
    inputs: [],
  },
  {
    type: "error",
    name: "TakingAmountTooHigh",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferFromMakerToTakerFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferFromTakerToMakerFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "WrongSeriesNonce",
    inputs: [],
  },
] as const;

export class IOrderMixin__factory {
  static readonly abi = _abi;
  static createInterface(): IOrderMixinInterface {
    return new Interface(_abi) as IOrderMixinInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IOrderMixin {
    return new Contract(address, _abi, runner) as unknown as IOrderMixin;
  }
}
