/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  MerkleStorageInvalidator,
  MerkleStorageInvalidatorInterface,
} from "../MerkleStorageInvalidator";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "limitOrderProtocol",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "lastValidated",
    inputs: [
      {
        name: "key",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "leaf",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "takerInteraction",
    inputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IOrderMixin.Order",
        components: [
          {
            name: "salt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "receiver",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "takerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "takingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "makerTraits",
            type: "uint256",
            internalType: "MakerTraits",
          },
        ],
      },
      {
        name: "extension",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "orderHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "extraData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "AccessDenied",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidProof",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a03461006957601f6103e238819003918201601f19168301916001600160401b0383118484101761006d5780849260209460405283398101031261006957516001600160a01b038116810361006957608052604051610360908161008282396080518160a50152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe608060409080825260049081361015610016575f80fd5b5f3560e01c908163acf4ce5c14610255575063adf38ba114610036575f80fd5b346102415736600319016101e0811261024157610100136102415767ffffffffffffffff9161010435838111610241576100739036908401610284565b6001600160a01b0392916101443584811603610241576101c435868111610241576100a19036908701610284565b50937f000000000000000000000000000000000000000000000000000000000000000016330361024557906100d5916102e2565b609f199101013560018060f01b03928251956020968781019061012435825261ffff198560101b1686820152603e815261010e816102b2565b519020928235601e198436030181121561024157830195863591838311610241576005928060051b36038b8a0113610241579792878b8701359601359888518c81019067ffffffffffffffff60c01b8960c01b1682528b602882015260288152610177816102b2565b519020945f925b828410610208575050505081169116036101f857600182018092116101e557835195868501918211878310176101d257509160019596915f93855287528187019485528252525f2092518355519101555f80f35b604190634e487b7160e01b5f525260245ffd5b601186634e487b7160e01b5f525260245ffd5b83516309bde33960e01b81528690fd5b909192958d87831b84010135908181105f14610232575f528d5260018a5f205b960192919061017e565b905f528d5260018a5f20610228565b5f80fd5b8251634ca8886760e01b81528590fd5b9190503461024157602036600319011261024157355f525f602052815f20600181549101549082526020820152f35b9181601f840112156102415782359167ffffffffffffffff8311610241576020838186019501011161024157565b6060810190811067ffffffffffffffff8211176102ce57604052565b634e487b7160e01b5f52604160045260245ffd5b919091602083106103225780359063ffffffff8260c01c169160e01c93601f19018411610313578101602001920390565b6309605a0160e41b5f5260045ffd5b505f9150819056fea264697066735822122014cb63c1982e58a703f1a31f7bab54b341aefe50742fe53894271e5caa69c69164736f6c63430008170033";

type MerkleStorageInvalidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleStorageInvalidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleStorageInvalidator__factory extends ContractFactory {
  constructor(...args: MerkleStorageInvalidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    limitOrderProtocol: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(limitOrderProtocol, overrides || {});
  }
  override deploy(
    limitOrderProtocol: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(limitOrderProtocol, overrides || {}) as Promise<
      MerkleStorageInvalidator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MerkleStorageInvalidator__factory {
    return super.connect(runner) as MerkleStorageInvalidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleStorageInvalidatorInterface {
    return new Interface(_abi) as MerkleStorageInvalidatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MerkleStorageInvalidator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MerkleStorageInvalidator;
  }
}
