/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IResolverExample,
  IResolverExampleInterface,
} from "../IResolverExample";

const _abi = [
  {
    type: "function",
    name: "arbitraryCalls",
    inputs: [
      {
        name: "targets",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "arguments",
        type: "bytes[]",
        internalType: "bytes[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deployDst",
    inputs: [
      {
        name: "dstImmutables",
        type: "tuple",
        internalType: "struct IBaseEscrow.Immutables",
        components: [
          {
            name: "orderHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "hashlock",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "maker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "taker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "token",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "safetyDeposit",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "timelocks",
            type: "uint256",
            internalType: "Timelocks",
          },
        ],
      },
      {
        name: "srcCancellationTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "deploySrc",
    inputs: [
      {
        name: "immutables",
        type: "tuple",
        internalType: "struct IBaseEscrow.Immutables",
        components: [
          {
            name: "orderHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "hashlock",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "maker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "taker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "token",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "safetyDeposit",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "timelocks",
            type: "uint256",
            internalType: "Timelocks",
          },
        ],
      },
      {
        name: "order",
        type: "tuple",
        internalType: "struct IOrderMixin.Order",
        components: [
          {
            name: "salt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maker",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "receiver",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "takerAsset",
            type: "uint256",
            internalType: "Address",
          },
          {
            name: "makingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "takingAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "makerTraits",
            type: "uint256",
            internalType: "MakerTraits",
          },
        ],
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "takerTraits",
        type: "uint256",
        internalType: "TakerTraits",
      },
      {
        name: "args",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "InvalidLength",
    inputs: [],
  },
  {
    type: "error",
    name: "LengthMismatch",
    inputs: [],
  },
] as const;

export class IResolverExample__factory {
  static readonly abi = _abi;
  static createInterface(): IResolverExampleInterface {
    return new Interface(_abi) as IResolverExampleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IResolverExample {
    return new Contract(address, _abi, runner) as unknown as IResolverExample;
  }
}
