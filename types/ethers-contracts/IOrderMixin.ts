/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IOrderMixin {
  export type OrderStruct = {
    salt: BigNumberish;
    maker: BigNumberish;
    receiver: BigNumberish;
    makerAsset: BigNumberish;
    takerAsset: BigNumberish;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
    makerTraits: BigNumberish;
  };

  export type OrderStructOutput = [
    salt: bigint,
    maker: bigint,
    receiver: bigint,
    makerAsset: bigint,
    takerAsset: bigint,
    makingAmount: bigint,
    takingAmount: bigint,
    makerTraits: bigint
  ] & {
    salt: bigint;
    maker: bigint;
    receiver: bigint;
    makerAsset: bigint;
    takerAsset: bigint;
    makingAmount: bigint;
    takingAmount: bigint;
    makerTraits: bigint;
  };
}

export interface IOrderMixinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bitInvalidatorForOrder"
      | "bitsInvalidateForOrder"
      | "cancelOrder"
      | "cancelOrders"
      | "fillContractOrder"
      | "fillContractOrderArgs"
      | "fillOrder"
      | "fillOrderArgs"
      | "hashOrder"
      | "rawRemainingInvalidatorForOrder"
      | "remainingInvalidatorForOrder"
      | "simulate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BitInvalidatorUpdated"
      | "OrderCancelled"
      | "OrderFilled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bitInvalidatorForOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bitsInvalidateForOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fillContractOrder",
    values: [IOrderMixin.OrderStruct, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillContractOrderArgs",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderArgs",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [IOrderMixin.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rawRemainingInvalidatorForOrder",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingInvalidatorForOrder",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulate",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "bitInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitsInvalidateForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillContractOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillContractOrderArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawRemainingInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
}

export namespace BitInvalidatorUpdatedEvent {
  export type InputTuple = [
    maker: AddressLike,
    slotIndex: BigNumberish,
    slotValue: BigNumberish
  ];
  export type OutputTuple = [
    maker: string,
    slotIndex: bigint,
    slotValue: bigint
  ];
  export interface OutputObject {
    maker: string;
    slotIndex: bigint;
    slotValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCancelledEvent {
  export type InputTuple = [orderHash: BytesLike];
  export type OutputTuple = [orderHash: string];
  export interface OutputObject {
    orderHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    remainingAmount: BigNumberish
  ];
  export type OutputTuple = [orderHash: string, remainingAmount: bigint];
  export interface OutputObject {
    orderHash: string;
    remainingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOrderMixin extends BaseContract {
  connect(runner?: ContractRunner | null): IOrderMixin;
  waitForDeployment(): Promise<this>;

  interface: IOrderMixinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bitInvalidatorForOrder: TypedContractMethod<
    [maker: AddressLike, slot: BigNumberish],
    [bigint],
    "view"
  >;

  bitsInvalidateForOrder: TypedContractMethod<
    [makerTraits: BigNumberish, additionalMask: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelOrder: TypedContractMethod<
    [makerTraits: BigNumberish, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelOrders: TypedContractMethod<
    [makerTraits: BigNumberish[], orderHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  fillContractOrder: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "nonpayable"
  >;

  fillContractOrderArgs: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "nonpayable"
  >;

  fillOrder: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  fillOrderArgs: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  hashOrder: TypedContractMethod<
    [order: IOrderMixin.OrderStruct],
    [string],
    "view"
  >;

  rawRemainingInvalidatorForOrder: TypedContractMethod<
    [maker: AddressLike, orderHash: BytesLike],
    [bigint],
    "view"
  >;

  remainingInvalidatorForOrder: TypedContractMethod<
    [maker: AddressLike, orderHash: BytesLike],
    [bigint],
    "view"
  >;

  simulate: TypedContractMethod<
    [target: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bitInvalidatorForOrder"
  ): TypedContractMethod<
    [maker: AddressLike, slot: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "bitsInvalidateForOrder"
  ): TypedContractMethod<
    [makerTraits: BigNumberish, additionalMask: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<
    [makerTraits: BigNumberish, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelOrders"
  ): TypedContractMethod<
    [makerTraits: BigNumberish[], orderHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillContractOrder"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillContractOrderArgs"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fillOrderArgs"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "hashOrder"
  ): TypedContractMethod<[order: IOrderMixin.OrderStruct], [string], "view">;
  getFunction(
    nameOrSignature: "rawRemainingInvalidatorForOrder"
  ): TypedContractMethod<
    [maker: AddressLike, orderHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "remainingInvalidatorForOrder"
  ): TypedContractMethod<
    [maker: AddressLike, orderHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "simulate"
  ): TypedContractMethod<
    [target: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BitInvalidatorUpdated"
  ): TypedContractEvent<
    BitInvalidatorUpdatedEvent.InputTuple,
    BitInvalidatorUpdatedEvent.OutputTuple,
    BitInvalidatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCancelled"
  ): TypedContractEvent<
    OrderCancelledEvent.InputTuple,
    OrderCancelledEvent.OutputTuple,
    OrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;

  filters: {
    "BitInvalidatorUpdated(address,uint256,uint256)": TypedContractEvent<
      BitInvalidatorUpdatedEvent.InputTuple,
      BitInvalidatorUpdatedEvent.OutputTuple,
      BitInvalidatorUpdatedEvent.OutputObject
    >;
    BitInvalidatorUpdated: TypedContractEvent<
      BitInvalidatorUpdatedEvent.InputTuple,
      BitInvalidatorUpdatedEvent.OutputTuple,
      BitInvalidatorUpdatedEvent.OutputObject
    >;

    "OrderCancelled(bytes32)": TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;
    OrderCancelled: TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;

    "OrderFilled(bytes32,uint256)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
  };
}
